from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.states.states import MainMenu
from app.keyboards.kb_shops import create_main_shop_keyboard, create_pagination_keyboard
from app.database.queries.requests import get_property_all


buy_router = Router()


@buy_router.message(F.text.lower().startswith("–º–∞–≥–∞–∑–∏–Ω"))
async def category_shop(message: Message):
    keyboard = create_main_shop_keyboard(message.from_user.id)
    await message.answer('üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard.as_markup())


@buy_router.callback_query(F.data.startswith(("cars_", "real_estate_", "gadgets_", "aircraft_", "yachts_", "helicopters_")))
async def show_items(callback_query: CallbackQuery):
    # –†–∞–∑–¥–µ–ª—è–µ–º callback_data –Ω–∞ —á–∞—Å—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    data = callback_query.data.split("_")
    category = data[0]  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è (cars, real_estate –∏ —Ç.–¥.)
    user_id = int(data[1])  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–≤–∞–ª –∫–Ω–æ–ø–∫—É

    if callback_query.from_user.id == user_id:
        # –ï—Å–ª–∏ user_id —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await send_page(callback_query, 0, category)
    else:
        # –ï—Å–ª–∏ user_id –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        await callback_query.answer('–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å', show_alert=True)

@buy_router.callback_query(F.data.startswith("page_"))
async def handle_pagination(callback_query: CallbackQuery):
    _, page, user_id, category = callback_query.data.split("_")
    if callback_query.from_user.id == int(user_id):
        await send_page(callback_query, int(page), category)
    else:
        await callback_query.answer('–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å', show_alert=True)

@buy_router.callback_query(F.data.startswith("menu_"))
async def back_to_menu(callback_query: CallbackQuery):
    user_id = int(callback_query.data.split("_")[1])
    if callback_query.from_user.id == user_id:
        keyboard = create_main_shop_keyboard(callback_query.from_user.id)
        await callback_query.message.edit_text('üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard.as_markup())
    else:
        await callback_query.answer('–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å', show_alert=True)

async def send_page(callback_query: CallbackQuery, page: int, category: str):
    properties = await get_property_all()
    user_id = callback_query.from_user.id
    keyboard = create_pagination_keyboard(properties, page, user_id, category)
    await callback_query.message.edit_text('üõç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:', reply_markup=keyboard.as_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —Ç–æ–≤–∞—Ä–∞–º–∏

@buy_router.callback_query(F.data.regexp(r"^(cars|real_estate|gadgets|aircraft|yachts|helicopters)_\d+_\d+$"))
async def handle_item_callback(callback_query: CallbackQuery):
    data = callback_query.data.split("_")

    if len(data) == 3:  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: category_item_id_user_id
        category = data[0]
        user_id = int(data[1])
        item_id = int(data[2])

        if callback_query.from_user.id == user_id:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä {item_id} –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}", show_alert=True)
        else:
            await callback_query.answer("–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å", show_alert=True)
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
