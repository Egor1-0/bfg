from sqlalchemy import update, select

from app.database.models import User, Finance, Characteristic, Ore, Inventory, Property, Bank
from app.database.session import async_session
from app.database.queries import get_ores, get_user_id, get_ore

async def push_ore() -> None:
    """
    Push all ores into the database if they don't exist yet.

    This function takes no arguments and returns None.
    """
    async with async_session() as session:
        existing_ores = await session.execute(select(Ore).limit(1))
        if existing_ores.scalars().first() is not None:  # check if ores already exist
            return

        session.add_all([
            Ore(ore="–∂–µ–ª–µ–∑–æ", experience=0, price=230000),
            Ore(ore="–∑–æ–ª–æ—Ç–æ", experience=500, price=1000000),
            Ore(ore="–∞–ª–º–∞–∑", experience=2000, price=116000000),
            Ore(ore="–∞–º–µ—Ç–∏—Å—Ç", experience=10000, price=217000000),
            Ore(ore="–∞–∫–≤–∞–º–∞—Ä–∏–Ω", experience=25000, price=461000000),
            Ore(ore="–∏–∑—É–º—Ä—É–¥", experience=60000, price=792000000),
            Ore(ore="–º–∞—Ç–µ—Ä–∏—è", experience=100000, price=8000000000),
            Ore(ore="–ø–ª–∞–∑–º–∞", experience=500000, price=12000000000),
            Ore(ore="–Ω–∏–∫–µ–ª—å", experience=950000, price=30000000000),
            Ore(ore="—Ç–∏—Ç–∞–Ω", experience=5000000, price=70000000000000),
            Ore(ore="–∫–æ–±–∞–ª—å—Ç", experience=20000000, price=120000000000000),
            Ore(ore="—ç–∫—Ç–æ–ø–ª–∞–∑–º–∞", experience=10000000000, price=20000000000000000)
        ])
        await session.commit()

async def push_car():
    async with async_session() as session:
        existing_property = await session.execute(select(Property).limit(1))
        if existing_property.scalars().first() is not None:
            return

        session.add_all([
            Property(
                name="Dacia Sandero",
                price=10000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 158 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 67\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 14,2 —Å–µ–∫",
            ),
            Property(
                name="Kia Picanto",
                price=15000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 161 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 67\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 14,1 —Å–µ–∫",
            ),
            Property(
                name="Hyundai i10",
                price=30000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 170 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 83\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 12,6 —Å–µ–∫",
            ),
            Property(
                name="Ford Fiesta",
                price=50000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 183 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 100\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 10,5 —Å–µ–∫",
            ),
            Property(
                name="Renault Clio",
                price=90000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 185 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 100\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 10,4 —Å–µ–∫",
            ),
            Property(
                name="Volkswagen Polo",
                price=100000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 187 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 110\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 9,9 —Å–µ–∫",
            ),
            Property(
                name="Mazda 3",
                price=250000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 204 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 122\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 9,1 —Å–µ–∫",
            ),
            Property(
                name="Toyota Corolla",
                price=400000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 195 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 132\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 8,9 —Å–µ–∫",
            ),
            Property(
                name="Honda Civic",
                price=600000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 200 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 158\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 8,5 —Å–µ–∫",
            ),
            Property(
                name="BMW 3 Series",
                price=90000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 235 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 255\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 5,8 —Å–µ–∫",
            ),
            Property(
                name="Audi A4",
                price=1400000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 250 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 261\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 5,6 —Å–µ–∫",
            ),
            Property(
                name="Mercedes-Benz C-Class",
                price=2500000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 250 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 255\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 5,7 —Å–µ–∫",
            ),
            Property(
                name="Tesla Model 3 Performance",
                price=6000000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 261 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 450\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 3,3 —Å–µ–∫",
            ),
            Property(
                name="Porsche 718 Cayman",
                price=8000000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 275 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 300\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 4,9 —Å–µ–∫",
            ),
            Property(
                name="BMW M4",
                price=10000000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 290 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 473\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 3,8 —Å–µ–∫",
            ),
            Property(
                name="Audi RS5",
                price=40000000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 280 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 444\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 3,9 —Å–µ–∫",
            ),
            Property(
                name="Nissan GT-R",
                price=100000000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 315 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 565\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 2,9 —Å–µ–∫",
            ),
            Property(
                name="Porsche 911 Turbo",
                price=300000000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 320 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 572\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 2,7 —Å–µ–∫",
            ),
            Property(
                name="Ferrari F8 Tributo",
                price=500000000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 340 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 710\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 2,9 —Å–µ–∫",
            ),
            Property(
                name="Bugatti Chiron",
                price=700000000000,
                description="üöó –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 420 –∫–º/—á\nüêé –õ–æ—à–∞–¥–∏–Ω—ã—Ö —Å–∏–ª: 1500\n‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100: 2,4 —Å–µ–∫",
            )
        ])
        await session.commit()

async def push_user(user_id: int):
    """–†–ï–ì–ò–°–¢–†–ò–†–£–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í –ë–î"""
    async with async_session() as session:
        session.add(User(tg_id=user_id)) #–ø—É—à —é–∑–µ—Ä–∞
        await session.commit()
        session.add(Finance(user=await get_user_id(user_id)))#–ø—É—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∏ —Ç–¥
        session.add(Characteristic(user=await get_user_id(user_id)))
        session.add(Bank(user=await get_user_id(user_id)))
        for ore in await get_ores(): #–ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º —Ä—É–¥–∞–º –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            session.add(Inventory(user=await get_user_id(user_id), ore = ore.id))
        await session.commit()


async def increanse(bit: int, user_id: int):
    """–£–í–ï–õ–ò–ß–ò–í–ê–ï–¢ –ö–û–õ–í–û –î–ï–ù–ï–ì –ù–ê –ó–ê–î–ê–ù–ù–û–ï –ß–ò–°–õ–û"""
    async with async_session() as session:
        await session.execute(update(Finance).values(money = Finance.money + bit).where(Finance.user == await get_user_id(user_id)))
        await session.commit()


async def deincreanse(bit: int, user_id: int):
    """–£–ú–ï–ù–¨–®–ê–ï–¢ –ö–û–õ–í–û –î–ï–ù–ï–ì –ù–ê –ó–ê–î–ê–ù–ù–û–ï –ß–ò–°–õ–û"""
    async with async_session() as session:
        await session.execute(update(Finance).values(money = Finance.money - bit).where(Finance.user == await get_user_id(user_id)))
        await session.commit()


async def increanse_ores(user_tg_id: int, name_ore: str, amount_ore: int):
    """–£–í–ï–õ–ò–ß–ò–í–ê–ï–¢ –ö–û–õ–í–û –†–£–î–´ –ù–ê –ó–ê–î–ê–ù–ù–û–ï –ß–ò–°–õ–û –ü–†–ò –î–û–ë–´–ß–ï"""
    async with async_session() as session:
        user_id = await get_user_id(user_tg_id) #–ø–æ–ª—É—á–µ–Ω–∏–µ –∞–π–¥–∏ —é–∑–µ—Ä–∞ –ø–æ —Ç–≥ –∞–π–¥–∏
        ore_id = (await get_ore(name_ore)).id #–ø–æ–ª—É—á–µ–Ω–∏–µ –∞–π–¥–∏ –ø–æ –∏–º–µ–Ω–∏ —Ä—É–¥—ã
        await session.execute(update(Inventory).values(ammount_ore=Inventory.ammount_ore + amount_ore).where(Inventory.user == user_id, Inventory.ore == ore_id))
        await session.commit()


async def deincreanse_energy(user_id: int):
    """–£–ú–ï–ù–¨–®–ê–ï–¢ –≠–ù–ï–†–ì–ò–Æ –ü–†–ò –î–û–ë–´–ß–ï –†–£–î–´ –ù–ê –û–î–ù–£"""
    async with async_session() as session:
        await session.execute(update(Characteristic).values(energy=Characteristic.energy - 1).where(Characteristic.user == await get_user_id(user_id)))
        await session.commit()


async def update_user_experience(user_id: int, experiences: int):
    """–£–í–ï–õ–ò–ß–ï–ù–ò–ï –û–ü–´–¢–ê –Æ–ó–ï–†–ê –ü–†–ò –î–û–ë–´–ß–ï –†–£–î–´"""
    async with async_session() as session:
        await session.execute(update(Characteristic).values(experience=Characteristic.experience + experiences).where(Characteristic.user == await get_user_id(user_id)))
        await session.commit()

async def limit_user(user_id: int, amount: int):
    """–£–ú–ï–ù–¨–®–ï–ù–ò–ï –õ–ò–ú–ò–¢–ê –ü–ï–†–ï–í–û–î–û–í –° –ö–ê–ñ–î–´–ú –ü–ï–†–ï–í–û–î–û–ú"""
    async with async_session() as session:
        await session.execute(update(User).values(limit=User.limit - amount).where(User.id == await get_user_id(user_id)))
        await session.commit()


async def reset_ammoint_ore(user_id: int, ore_name: int):
    """–°–ë–†–ê–°–´–í–ê–ï–¢ –ö–û–õ–í–û –†–£–î–´ –ü–†–ò –ü–†–û–î–ê–ñ–ï"""
    async with async_session() as session:
        await session.execute(update(Inventory).values(ammount_ore = 0).where((Inventory.user == await get_user_id(user_id)) & (Inventory.ore == (await get_ore(ore_name)).id)))
        await session.commit()

        
async def push_transferred(user_id: int, amount):
    """–û–ë–ù–û–í–Ø–õ–ï–¢ –ö–û–õ–í–û –ü–ï–†–ï–í–û–î–û–í –ó–ê –ú–ï–°–Ø–¶"""
    async with async_session() as session:
        await session.execute(update(User).values(transferred=User.transferred + amount).where(User.id == await get_user_id(user_id)))
        await session.commit()


async def increanse_bank(tg_id: int, money_ammount: int):
    """
    Updates bank balance of a user with tg_id by adding money_ammount to it

    Args:
        tg_id (int): Telegram ID of the user
        money_ammount (int): Amount of money to add to the balance

    Returns:
        None
    """
    async with async_session() as session:
        # Update bank balance by adding money_ammount to it
        await session.execute(update(Bank)
                             .values(money_ammount=Bank.money_ammount + money_ammount)
                             .where(Bank.user == await get_user_id(tg_id)))
        # Commit the changes
        await session.commit()

async def deincreanse_bank(tg_id: int, money_ammount: int):
    """
    Decreases bank balance of a user with tg_id by subtracting money_ammount from it

    Args:
        tg_id (int): Telegram ID of the user
        money_ammount (int): Amount of money to subtract from the balance

    Returns:
        None
    """
    async with async_session() as session:
        # Update bank balance by subtracting money_ammount from it
        # We subtract money_ammount because we want to decrease the balance
        await session.execute(update(Bank)
                             .values(money_ammount=Bank.money_ammount - money_ammount)
                             # We update the Bank row where user if is equal to the user id
                             .where(Bank.user == await get_user_id(tg_id)))
        # Commit the changes
        await session.commit()
